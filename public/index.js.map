{"version":3,"file":"index.js","sources":["../src/controller.js","../src/routes.js","../src/docs.js","../src/index.js"],"sourcesContent":["const queryString = require('query-string');\r\n\r\nconst transformToTernary = (obj) => {\r\n  let ternaryObject = obj;\r\n\r\n  if (!('@m_result' in obj)) {\r\n    ternaryObject = {\r\n      '@m_result': obj,\r\n      '@m_docs': {\r\n        merged: {},\r\n        objs: []\r\n      }\r\n    };\r\n  }\r\n\r\n  return ternaryObject;\r\n};\r\n\r\nconst getObj = (iftrueTernary, iffalseTernary) => {\r\n  let result;\r\n  if (!iftrueTernary['@m_docs'].objs.length && !iffalseTernary['@m_docs'].objs.length) {\r\n    result = [].concat(iftrueTernary['@m_result'], iffalseTernary['@m_result']);\r\n  } else if (!iftrueTernary['@m_docs'].objs.length) {\r\n    result = [].concat(iftrueTernary['@m_result'], iffalseTernary['@m_docs'].objs);\r\n  } else if (!iffalseTernary['@m_docs'].objs.length) {\r\n    result = [].concat(iffalseTernary['@m_result'], iftrueTernary['@m_docs'].objs);\r\n  } else {\r\n    result = [].concat(iftrueTernary['@m_docs'].objs, iffalseTernary['@m_docs'].objs);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst getHostQuery = (req) => {\r\n  let hostQuery;\r\n  const host = req.headers.referer || req.url;\r\n  const index = host.indexOf('?');\r\n\r\n  if (hostQuery === -1) {\r\n    hostQuery = {};\r\n  } else {\r\n    const formatedHost = host.slice(index);\r\n    hostQuery = queryString.parse(formatedHost);\r\n  }\r\n\r\n  return hostQuery;\r\n};\r\n\r\nexport const ternary = ({ condition, iftrue, iffalse }) => {\r\n  const iftrueTernary = transformToTernary(iftrue);\r\n  const iffalseTernary = transformToTernary(iffalse);\r\n\r\n  const result = condition ? iftrueTernary['@m_result'] : iffalseTernary['@m_result'];\r\n  const merged = Object.assign({}, iftrueTernary['@m_result'], iffalseTernary['@m_result'], iftrueTernary['@m_docs'].merged, iffalseTernary['@m_docs'].merged);\r\n  const objs = getObj(iftrueTernary, iffalseTernary);\r\n\r\n  return {\r\n    '@m_result': result,\r\n    '@m_docs': {\r\n      merged,\r\n      objs\r\n    }\r\n  };\r\n};\r\n\r\nexport default (customContoller, delay) => (req, res) => {\r\n  const typeofCustomController = typeof customContoller;\r\n  let response = {};\r\n\r\n  if (typeofCustomController === 'function') {\r\n    const { body, params, query } = req;\r\n\r\n    const hostQuery = getHostQuery(req);\r\n\r\n    const data = {\r\n      body,\r\n      params,\r\n      query,\r\n      hostQuery\r\n    };\r\n\r\n    const result = customContoller(data, req, res);\r\n    response = '@m_result' in result ? result['@m_result'] : result;\r\n  } else if (typeofCustomController === 'object' && !Array.isArray(customContoller)) {\r\n    response = customContoller;\r\n  } else {\r\n    throw new Error(`Unacceptable type of controller: ${typeofCustomController}. It must be 'object' or 'function'.`);\r\n  }\r\n\r\n  setTimeout(() => res.json(response), delay);\r\n};\r\n","import controllerProvider from './controller';\r\n\r\nconst Router = require('express').Router();\r\n\r\nRouter.use((req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With');\r\n  next();\r\n});\r\n\r\nexport default (routes) => {\r\n  routes.forEach((route) => {\r\n    const formatedMethod = route.method.toLowerCase();\r\n\r\n    const controller = route.controller || route.json;\r\n    const delay = route.delay || 0;\r\n\r\n    try {\r\n      Router[formatedMethod](route.url, controllerProvider(controller, delay));\r\n    } catch (e) {\r\n      throw new Error(`${formatedMethod} is a wrong method`);\r\n    }\r\n  });\r\n\r\n  return Router;\r\n};\r\n","function parseObject(obj) {\r\n  const parsedObject = {};\r\n  Object.keys(obj).forEach((key) => {\r\n    const value = obj[key];\r\n    let type = typeof value;\r\n\r\n    if (Array.isArray(value)) {\r\n      type = parseArray(value); // eslint-disable-line\r\n    } else if (value === null) {\r\n      type = 'null';\r\n    } else if (type === 'object') {\r\n      type = parseObject(value);\r\n    }\r\n\r\n    parsedObject[key] = type;\r\n  });\r\n\r\n  return parsedObject;\r\n}\r\n\r\nfunction parseArray(arr) {\r\n  let parsedArray;\r\n  const firstItem = arr[0];\r\n\r\n  if (!firstItem) {\r\n    parsedArray = '[]';\r\n  } else if (Array.isArray(firstItem)) {\r\n    parsedArray = `${parseArray(firstItem)}[]`;\r\n  } else if (typeof firstItem === 'object') {\r\n    parsedArray = [parseObject(firstItem)];\r\n  } else {\r\n    parsedArray = `${typeof firstItem}[]`;\r\n  }\r\n\r\n  return parsedArray;\r\n}\r\n\r\nconst isPropMandatory = (types, matches, possibleMatches) => {\r\n  let isMandatory = false;\r\n\r\n  if (types.includes('null') || types.includes('undefined')) {\r\n    isMandatory = false;\r\n  } else if (matches === possibleMatches) {\r\n    isMandatory = true;\r\n  }\r\n\r\n  return isMandatory;\r\n};\r\n\r\nconst getMandatoryFlag = ({\r\n  types,\r\n  matches,\r\n  possibleMatches,\r\n  flagIfYes,\r\n  flagIfNo\r\n}) => (isPropMandatory(types, matches, possibleMatches) ? flagIfYes : flagIfNo);\r\n\r\nconst findTypesObjects = types => types.filter(type => typeof type === 'object');\r\nconst findTypesNoObjects = types => types.filter(type => typeof type !== 'object');\r\n\r\nconst generateTypesWithMergedObjects = (types) => {\r\n  const typesObjects = findTypesObjects(types);\r\n  let typesWithMergedObjects = types;\r\n\r\n  if (typesObjects.length > 1) {\r\n    const merged = Object.assign({}, ...typesObjects);\r\n\r\n    const JSONFromTernary = getJSONFromTernary({ // eslint-disable-line\r\n      objs: typesObjects,\r\n      merged\r\n    });\r\n\r\n    typesWithMergedObjects = [].concat(findTypesNoObjects(types), JSONFromTernary);\r\n  }\r\n\r\n  return typesWithMergedObjects;\r\n};\r\n\r\nconst generateJSONValue = (types) => {\r\n  let JSONValue = '';\r\n\r\n  const typesWithMergedObject = generateTypesWithMergedObjects(types);\r\n\r\n  const typesWithoutNullAndUndef = typesWithMergedObject.filter(type => type !== 'undefined' && type !== 'null');\r\n\r\n  typesWithoutNullAndUndef.forEach((item, index) => {\r\n    if (typeof item === 'object') {\r\n      JSONValue += `${JSON.stringify(item, null, 2)}`;\r\n    } else {\r\n      JSONValue += `${item}`;\r\n    }\r\n\r\n    if (index < typesWithoutNullAndUndef.length - 1) JSONValue += ' | ';\r\n  });\r\n\r\n  return JSONValue;\r\n};\r\n\r\nconst parseStringifiedObject = (stringifiedObject) => {\r\n  const parsedObject = {};\r\n  Object.keys(stringifiedObject).forEach((key) => {\r\n    const value = stringifiedObject[key];\r\n\r\n    const type = typeof value;\r\n\r\n    if (type === 'string') {\r\n      try {\r\n        const parsed = JSON.parse(value);\r\n        if (typeof parsed === 'object') {\r\n          parsedObject[key] = parseStringifiedObject(parsed);\r\n        } else {\r\n          parsedObject[key] = value;\r\n        }\r\n      } catch (e) {\r\n        parsedObject[key] = value;\r\n      }\r\n    } else {\r\n      parsedObject[key] = value;\r\n    }\r\n  });\r\n\r\n  if (parsedObject[0]) return [parsedObject[0]];\r\n\r\n  return parsedObject;\r\n};\r\n\r\nfunction getJSONFromTernary(ternaryObject) {\r\n  const { merged, objs } = ternaryObject;\r\n  const mergedKeys = Object.keys(merged);\r\n\r\n  const stringifiedObject = {};\r\n\r\n  mergedKeys.forEach((key) => {\r\n    let matches = 0;\r\n    const types = [];\r\n\r\n    objs.forEach((obj) => {\r\n      if (key in obj) {\r\n        const value = obj[key];\r\n        matches += 1;\r\n        let type = typeof value;\r\n\r\n        if (Array.isArray(value)) {\r\n          type = parseArray(value);\r\n        } else if (value === null) {\r\n          type = 'null';\r\n        } else if (typeof value === 'object') {\r\n          type = parseObject(value);\r\n        }\r\n\r\n        if (!types.includes(type)) types.push(type);\r\n      }\r\n    });\r\n\r\n    const mandatoryFlag = getMandatoryFlag({\r\n      types,\r\n      matches,\r\n      possibleMatches: objs.length,\r\n      flagIfYes: '',\r\n      flagIfNo: '?'\r\n    });\r\n    const JSONKey = `${mandatoryFlag}${key}`;\r\n    const JSONValue = generateJSONValue(types);\r\n\r\n    stringifiedObject[JSONKey] = JSONValue;\r\n  });\r\n\r\n  const JSONFromTernary = parseStringifiedObject(stringifiedObject);\r\n\r\n  return JSONFromTernary;\r\n}\r\n\r\nconst getParamsFromUrl = (url) => {\r\n  const paramsFromUrl = {};\r\n  url\r\n    .split('?')[0]\r\n    .split('/')\r\n    .filter(item => item.includes(':'))\r\n    .forEach((param) => {\r\n      paramsFromUrl[param.replace(':', '')] = '';\r\n    }); // all route params are strings\r\n\r\n  return paramsFromUrl;\r\n};\r\n\r\nconst getDataFromArray = (array) => {\r\n  const data = {};\r\n  array.forEach((item) => {\r\n    data[item] = '';\r\n  });\r\n  return data;\r\n};\r\n\r\nconst getArrayOfJSON = (json) => {\r\n  const string = JSON.stringify(json, null, 2).replace(/\\\\\"/g, \"'\").replace(/\\\\n/g, `\r\n  `);\r\n\r\n  const array = string.split('\\n');\r\n\r\n  return array;\r\n};\r\n\r\nconst generateDocsFromArray = (array) => {\r\n  const docs = {\r\n    language: 'js',\r\n    content: []\r\n  };\r\n\r\n  getArrayOfJSON(array).forEach(item => docs.content.push(item));\r\n\r\n  return docs;\r\n};\r\n\r\nconst generateDocsFromObject = (response, body, hostQuery = [], queryArray = [], url = '') => {\r\n  const docs = {\r\n    language: 'js',\r\n    content: []\r\n  };\r\n\r\n  let json;\r\n\r\n  if (Array.isArray(response)) {\r\n    json = `[${parseObject(response)}]`;\r\n  } else if (typeof response === 'object') {\r\n    json = parseObject(response);\r\n  } else {\r\n    const responseJSON = response({\r\n      body,\r\n      params: getParamsFromUrl(url),\r\n      query: getDataFromArray(queryArray),\r\n      hostQuery: getDataFromArray(hostQuery)\r\n    });\r\n\r\n    if ('@m_docs' in responseJSON) {\r\n      json = getJSONFromTernary(responseJSON['@m_docs']);\r\n    } else {\r\n      json = parseObject(responseJSON);\r\n    }\r\n  }\r\n\r\n  getArrayOfJSON(json).forEach(item => docs.content.push(item));\r\n\r\n  return docs;\r\n};\r\n\r\nconst getFileName = fileName => `${fileName.toLocaleLowerCase().replace(new RegExp(' ', 'g'), '-')}.md`;\r\n\r\nexport default (route) => {\r\n  const { docs } = route;\r\n  const fileContent = [];\r\n\r\n  fileContent.push({\r\n    h1: docs.title\r\n  });\r\n\r\n  if (docs.description) {\r\n    fileContent.push({\r\n      blockquote: docs.description\r\n    });\r\n  }\r\n\r\n  fileContent.push({\r\n    h2: 'Method'\r\n  });\r\n\r\n  fileContent.push({\r\n    p: route.method.toLocaleUpperCase()\r\n  });\r\n\r\n  fileContent.push({\r\n    h2: 'URL'\r\n  });\r\n\r\n  fileContent.push({\r\n    code: {\r\n      language: 'js',\r\n      content: [route.url.split('?')[0]] // ignore query params\r\n    }\r\n  });\r\n\r\n  if (docs.hostQuery) {\r\n    fileContent.push({\r\n      h2: 'Host Query Parameters'\r\n    });\r\n    fileContent.push({\r\n      blockquote: 'For mock development'\r\n    });\r\n    fileContent.push({\r\n      code: generateDocsFromArray(docs.hostQuery)\r\n    });\r\n  }\r\n\r\n  if (docs.query) {\r\n    fileContent.push({\r\n      h2: 'Query Parameters'\r\n    });\r\n    fileContent.push({\r\n      code: generateDocsFromArray(docs.query)\r\n    });\r\n  }\r\n\r\n  if (docs.body) {\r\n    fileContent.push({\r\n      h2: 'Body'\r\n    });\r\n    fileContent.push({\r\n      code: generateDocsFromObject(docs.body)\r\n    });\r\n  }\r\n\r\n  if (route.json) {\r\n    fileContent.push({\r\n      h2: 'Response'\r\n    });\r\n    fileContent.push({\r\n      code: generateDocsFromObject(route.json)\r\n    });\r\n  } else if (route.controller) {\r\n    fileContent.push({\r\n      h2: 'Response'\r\n    });\r\n    fileContent.push({\r\n      code: generateDocsFromObject(route.controller, docs.body, docs.hostQuery, docs.query, route.url) // eslint-disable-line\r\n    });\r\n  }\r\n\r\n  const fileName = getFileName(docs.fileName || docs.title);\r\n\r\n  return {\r\n    fileName,\r\n    fileContent\r\n  };\r\n};\r\n","import createRouter from './routes';\r\nimport { ternary } from './controller';\r\nimport generateDocumentation from './docs';\r\n\r\nconst bodyParser = require('body-parser');\r\nconst express = require('express');\r\nconst morgan = require('morgan');\r\nconst { choosePort } = require('react-dev-utils/WebpackDevServerUtils');\r\nconst json2md = require('json2md');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst colors = require('colors'); // eslint-disable-line no-unused-vars\r\n\r\nconst app = express();\r\n\r\napp.use(bodyParser.json());\r\napp.use(morgan('dev'));\r\n\r\napp.use((req, res, next) => {\r\n  if (req.method === 'OPTIONS') {\r\n    res.header('Access-Control-Allow-Origin', '*');\r\n    res.header('Access-Control-Allow-Methods', 'GET, PUT, POST, DELETE, OPTIONS, PATCH');\r\n    res.header(\r\n      'Access-Control-Allow-Headers',\r\n      'Content-Type, Authorization, Content-Length, X-Requested-With, X-Redmine-API-Key, X-On-Behalf-Of, __RequestVerificationToken',\r\n    );\r\n\r\n    res.sendStatus(200);\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n\r\nconst writeFiles = (url, fileContent) => {\r\n  fs.writeFile(url, json2md(fileContent), (err) => {\r\n    if (err) {\r\n      console.log(err.red); // eslint-disable-line no-console\r\n    } else {\r\n      console.log(`📄 ${url}`); // eslint-disable-line no-console\r\n    }\r\n  });\r\n};\r\n\r\nconst clearDocsFolder = (docsUrl) => {\r\n  try {\r\n    const files = fs.readdirSync(docsUrl);\r\n    Object.keys(files).forEach((key) => {\r\n      const file = files[key];\r\n      fs.unlinkSync(path.join(docsUrl, file));\r\n    });\r\n  } catch (err) {\r\n    if (err.code === 'ENOENT') {\r\n      console.log(`Cannot find the path: ${docsUrl}`.red); // eslint-disable-line no-console\r\n    } else {\r\n      console.log(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n};\r\n\r\nconst createDocs = (routes, docsUrl) => {\r\n  let docsFolderCleared = false;\r\n  routes.forEach((route) => {\r\n    if (route.docs) {\r\n      if (!docsFolderCleared) {\r\n        clearDocsFolder(docsUrl);\r\n        docsFolderCleared = true;\r\n      }\r\n\r\n      const documentation = generateDocumentation(route);\r\n      const url = `${docsUrl}/${documentation.fileName}`;\r\n\r\n      writeFiles(url, documentation.fileContent);\r\n    }\r\n  });\r\n};\r\n\r\nconst start = ({\r\n  routes = [],\r\n  defaultPort = 3000,\r\n  docsUrl = path.resolve(process.cwd(), 'docs'),\r\n}) => {\r\n  app.use('/', createRouter(routes));\r\n  choosePort('0.0.0.0', defaultPort).then((port) => {\r\n    if (port == null) return;\r\n    app.listen(port, () => console.log(`🚀 App started on port: ${port}`.green)); // eslint-disable-line no-console\r\n  });\r\n\r\n  createDocs(routes, docsUrl);\r\n};\r\n\r\nmodule.exports = {\r\n  start,\r\n  ternary,\r\n};\r\n"],"names":["queryString","require","transformToTernary","obj","ternaryObject","getObj","iftrueTernary","iffalseTernary","objs","length","concat","getHostQuery","req","hostQuery","host","headers","referer","url","index","indexOf","formatedHost","slice","parse","ternary","condition","iftrue","iffalse","Object","assign","merged","customContoller","delay","res","typeofCustomController","response","body","params","query","result","Array","isArray","Error","json","Router","use","next","header","routes","forEach","route","formatedMethod","method","toLowerCase","controller","controllerProvider","e","parseObject","parsedObject","keys","key","value","type","parseArray","arr","firstItem","isPropMandatory","types","matches","possibleMatches","isMandatory","includes","getMandatoryFlag","flagIfYes","flagIfNo","findTypesObjects","filter","findTypesNoObjects","generateTypesWithMergedObjects","typesObjects","typesWithMergedObjects","JSONFromTernary","getJSONFromTernary","generateJSONValue","JSONValue","typesWithoutNullAndUndef","item","JSON","stringify","parseStringifiedObject","stringifiedObject","parsed","push","JSONKey","getParamsFromUrl","paramsFromUrl","split","param","replace","getDataFromArray","array","data","getArrayOfJSON","generateDocsFromArray","docs","content","generateDocsFromObject","queryArray","responseJSON","getFileName","fileName","toLocaleLowerCase","RegExp","fileContent","title","description","toLocaleUpperCase","bodyParser","express","morgan","choosePort","json2md","fs","path","colors","app","sendStatus","writeFiles","writeFile","err","log","red","clearDocsFolder","docsUrl","files","readdirSync","file","unlinkSync","join","code","createDocs","docsFolderCleared","documentation","generateDocumentation","start","defaultPort","resolve","process","cwd","createRouter","then","port","listen","console","green","module","exports"],"mappings":"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"}